#include <SPI.h>

/*----------
| C  130.81
| C# 138.59
| D  146.83
| D# 155.56
| E  164.81
| F  174.61
| F# 185.00
| G  196.00
| G# 207.65
| A  220.00
| A# 233.08
| B  246.94
| C  261.63
------------*/

byte s2;
byte ls2 = HIGH;
unsigned long ld2 = 0;

byte s3;
byte ls3 = HIGH;
unsigned long ld3 = 0;

byte s4;
byte ls4 = HIGH;
unsigned long ld4 = 0;

byte s6;
byte ls6 = HIGH;
unsigned long ld6 = 0;

byte s5;
byte ls5 = HIGH;
unsigned long ld5 = 0;
byte s5_trigger, s5_latch, s5_continuous;

const unsigned long debounceDelay = 50;

const unsigned long dds_tune = 4294967296 / 9800;
uint32_t dds_time;

int sample_out_temp;
byte sample_out;

byte amplitude = 100;

int sine_pitch1 = 131;
int sine_pitch2 = 165;
int sine_pitch3 = 196;
int sine_sample1, sine_sample2, sine_sample3;
byte sine_index1, sine_index2, sine_index3;
uint32_t sine_accumulator1, sine_accumulator2, sine_accumulator3;

int drum_pitch = 440;
uint16_t drum_index, drum_window_start, drum_window_end;
int drum_sample;
uint32_t drum_accumulator;

const byte sine_table[] PROGMEM =
{ 128,131,134,137,140,143,146,149,152,155,158,162,165,167,170,173,176,179,182,185,188,190,193,196,198,201,203,206,208,211,213,215,218,220,222,224,
226,228,230,232,234,235,237,238,240,241,243,244,245,246,248,249,250,250,251,252,253,253,254,254,254,255,255,255,255,255,255,255,254,254,254,253,253,
252,251,250,250,249,248,246,245,244,243,241,240,238,237,235,234,232,230,228,226,224,222,220,218,215,213,211,208,206,203,201,198,196,193,190,188,185,
182,179,176,173,170,167,165,162,158,155,152,149,146,143,140,137,134,131,128,124,121,118,115,112,109,106,103,100,97,93,90,88,85,82,79,76,73,70,67,65,
62,59,57,54,52,49,47,44,42,40,37,35,33,31,29,27,25,23,21,20,18,17,15,14,12,11,10,9,7,6,5,5,4,3,2,2,1,1,1,0,0,0,0,0,0,0,1,1,1,2,2,3,4,5,5,6,7,9,10,11,
12,14,15,17,18,20,21,23,25,27,29,31,33,35,37,40,42,44,47,49,52,54,57,59,62,65,67,70,73,76,79,82,85,88,90,93,97,100,103,106,109,112,115,118,121,124 };

const byte drum_table[] PROGMEM =
{ 128,127,130,128,131,129,136,141,182,240,246,246,243,244,238,241,229,237,102,-6,11,-2,7,1,6,2,6,5,8,8,11,13,14,17,18,21,22,26,28,33,36,45,54,70,94,
127,168,206,223,233,238,244,244,245,248,249,253,253,252,251,252,251,251,250,248,246,245,242,240,238,236,234,232,229,226,222,216,208,196,176,147,113,
74,44,30,24,17,13,10,7,4,3,2,2,6,4,3,4,4,4,5,6,7,9,11,12,14,16,18,20,23,26,29,35,44,58,83,115,149,186,212,224,231,235,239,239,240,241,242,243,244,
247,248,249,248,248,247,246,245,243,242,240,238,236,235,233,230,227,224,219,213,202,187,166,140,113,82,53,38,30,25,22,17,14,12,10,9,8,7,6,5,5,5,5,6,
6,7,8,9,11,13,14,16,17,19,21,24,26,31,36,45,59,80,109,140,169,194,212,221,227,231,235,237,239,241,243,244,245,242,240,243,243,243,243,242,241,240,
239,238,237,235,234,232,229,228,224,221,216,207,195,178,153,130,106,80,58,44,35,30,27,22,20,18,17,16,15,14,14,14,14,15,15,14,10,11,11,12,13,15,16,17,
19,20,22,25,28,31,37,44,54,68,88,109,129,152,176,195,209,218,223,228,231,234,236,237,239,238,236,237,237,237,237,238,239,239,239,238,238,237,236,235,
234,232,231,229,226,224,220,214,205,193,174,152,131,111,90,70,54,44,38,30,27,24,22,21,20,19,18,18,18,18,18,19,19,20,19,19,19,20,20,22,23,24,25,27,29,
32,36,41,46,55,67,80,97,113,130,148,167,185,198,208,215,220,224,227,229,231,232,233,234,234,235,235,233,232,232,233,234,234,234,233,232,231,229,228,
226,224,221,218,213,206,196,185,170,154,138,123,108,93,79,67,62,50,40,36,32,30,28,27,25,24,24,23,23,23,24,25,25,25,26,25,25,25,25,26,27,28,29,31,34,
36,40,45,52,62,72,86,102,116,130,145,161,176,188,198,208,213,217,220,222,224,225,227,227,228,228,228,228,228,227,225,223,224,223,223,225,224,223,222,
220,218,214,212,208,201,196,189,177,169,157,146,134,123,111,102,95,75,63,56,49,44,40,37,35,33,32,31,30,30,30,30,30,32,35,34,34,34,33,33,33,33,34,36,
37,41,44,48,55,61,67,76,86,99,110,121,131,141,152,162,172,184,192,199,205,210,213,216,218,220,221,221,222,222,222,221,221,216,214,214,213,213,212,211,
210,209,206,204,205,203,199,195,190,184,175,168,161,151,143,138,126,115,109,99,92,84,77,70,65,60,57,53,50,47,45,44,43,42,42,42,41,43,43,43,44,44,45,
45,45,46,46,46,46,49,51,57,63,71,80,87,94,103,112,121,130,139,150,160,168,176,182,188,193,197,201,204,206,208,210,211,210,210,209,209,208,205,204,204,
204,203,202,201,200,199,195,192,189,185,182,177,171,164,157,149,142,134,127,119,112,105,99,94,89,85,81,77,74,71,69,68,66,64,63,62,61,60,59,58,58,58,
57,57,58,59,60,60,61,63,65,69,73,77,81,86,90,97,103,108,114,119,125,131,136,141,146,150,155,159,164,168,171,174,176,179,181,183,184,186,188,189,190,
191,191,191,189,188,187,186,185,183,182,180,178,175,172,169,166,161,156,152,149,146,140,135,130,125,120,115,112,108,104,101,98,95,91,88,85,82,79,77,
75,73,73,72,71,71,71,71,71,72,71,71,72,74,76,76,78,82,86,89,93,98,100,104,107,112,117,120,124,128,132,136,140,144,148,151,154,157,160,162,164,166,
167,169,170,171,172,173,174,174,174,175,175,175,175,175,174,174,172,170,168,166,164,162,160,156,152,150,145,142,139,135,132,128,125,122,118,116,113,
110,108,105,102,100,97,95,93,91,89,87,86,84,83,82,81,81,81,82,82,83,84,85,87,88,90,93,95,97,100,103,106,110,113,117,121,124,127,130,132,135,137,140,
142,144,146,147,149,151,152,154,155,157,159,160,162,163,164,164,165,165,165,165,164,164,163,163,161,160,159,158,157,155,152,150,148,145,142,139,137,
135,132,130,128,126,124,122,120,118,116,114,112,109,107,105,104,102,101,99,98,97,95,94,94,93,93,94,94,94,95,96,97,98,100,102,104,106,108,110,112,113,
115,116,118,119,121,122,124,126,128,130,132,135,137,139,141,143,146,148,149,151,153,154,155,156,156,156,157,157,157,157,156,156,155,154,153,152,151,
150,149,148,147,146,145,144,142,141,140,138,136,134,132,130,128,126,124,123,121,119,117,115,113,111,109,108,107,106,105,105,105,104,104,104,103,102,
102,102,102,102,102,103,103,104,105,106,107,109,110,111,112,114,116,118,120,122,124,126,127,129,131,132,134,135,137,138,140,141,142,143,143,144,145,
145,146,146,147,148,149,150,150,151,151,152,152,151,151,150,150,149,148,146,144,142,140,138,136,134,132,131,129,128,126,125,123,122,120,119,117,116,
115,114,113,112,112,112,112,112,111,111,111,111,111,111,111,110,110,110,110,110,110,110,111,112,113,114,114,115,115,116,116,117,118,119,121,122,124,
125,127,128,129,130,131,132,133,134,135,136,137,138,139,139,140,141,141,142,142,142,142,142,142,142,142,142,142,142,142,142,141,141,140,140,139,138,
137,137,136,134,133,132,130,129,127,125,124,122,121,119,118,117,116,116,115,114,114,114,113,113,112,112,112,112,112,112,113,113,113,113,113,114,114,
114,114,114,115,115,115,116,116,117,118,119,120,121,122,123,124,126,127,128,130,131,132,134,135,136,137,138,138,139,139,140,140,140,140,141,141,140,
140,140,139,139,139,139,138,138,137,137,136,135,134,133,132,132,131,130,129,128,128,127,126,126,125,124,123,122,121,120,120,119,119,118,118,118,117,
117,116,116,116,116,115,115,115,115,115,115,115,115,115,115,115,116,116,116,117,118,119,120,121,122,122,123,124,125,126,126,127,128,128,129,130,131,
131,131,132,133,134,134,135,135,136,136,136,136,136,136,136,136,136,136,136,136,135,136,136,135,135,135,135,134,133,133,132,131,130,129,128,127,126,
126,125,125,124,124,123,122,122,121,121,121,120,120,119,119,119,119,118,118,118,117,117,117,118,118,118,119,119,120,120,120,120,120,121,121,121,121,
121,121,122,122,123,123,124,124,125,126,127,127,128,129,129,129,130,130,130,130,130,131,131,132,132,133,133,134,134,134,135,135,135,135,135,135,134,
134,133,133,132,132,131,131,131,130,130,130,129,129,128,128,127,127,126,126,125,125,124,124,124,123,123,123,122,122,122,121,121,121,120,120,120,120,
119,119,119,119,119,119,119,119,119,119,119,120,120,121,121,121,122,122,123,123,124,124,125,126,127,127,128,129,129,130,130,130,130,130,130,130,131,
131,132,132,132,133,133,133,134,134,134,134,134,134,134,134,133,133,133,132,132,131,131,131,130,130,129,129,128,128,127,127,126,126,126,125,125,125,
124,124,123,123,122,122,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,123,123,123,123,123,123,124,124,124,124,124,124,125,
125,125,126,126,126,126,126,127,127,127,128,128,128,129,129,130,130,130,130,131,131,131,131,132,132,132,132,132,132,132,132,132,132,132,132,131,131,
131,130,130,129,129,128,128,128,128,127,127,127,126,126,125,125,125,124,124,123,123,123,123,123,123,123,122,122,122,122,122,122,122,122,122,122,122,
122,122,122,123,123,123,123,124,124,124,124,125,125,125,125,125,126,126,126,126,127,127,127,127,127,128,128,128,129,129,129,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,130,129,129,129,129,129,129,129,128,128,128,128,127,127,127,126,126,126,125,125,125,125,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,124,124,124,124,124,124,124,125,125,125,125,125,125,125,126,126,126,126,126,
127,127,127,127,127,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,129,128,128,128,128,128,127,127,127,127,127,127,
127,127,126,126,126,126,126,126,126,126,126,126,125,125,125,125,125,125,125,125,125,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
124,124,125,125,125,125,126,126,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,127,127,127,127,127,127,128,
128,128,128,128,128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127,127,126,126,126,126,126,125,125,125,125,125,125,125,125,124,124,124,
124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,
127,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,129,129,129,129,128,128,128,128,127,127,127,127,126,126,126,126,126,126,
126,126,126,126,126,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,
126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127};

int drum_length = 2052;

void setup(void) {
  Serial.begin(9600);

  cli();

  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  pinMode(6, INPUT_PULLUP);

  SPI.begin();
  SPI.setBitOrder(MSBFIRST);

  TIMSK2 = (1 << OCIE2A);
  OCR2A = 50; // sets the compare. measured at 9813Hz

  TCCR2A = 1 << WGM21 | 0 << WGM20; /* CTC mode, reset on match */
  TCCR2B = 0 << CS22 | 1 << CS21 | 1 << CS20; /* clk, /8 prescaler */
  
  TCCR0B = B0000001;
  TCCR1B = B0000001;

  sei();
}

ISR(TIMER2_COMPA_vect) {
  dds_time++;

  OCR2A = 50;

  if (!s5_continuous && s5_trigger) {
    drum_index = 0;
    drum_accumulator = 0;
    s5_latch = 1;
    s5_trigger = 0;
  }

  sine_sample1 = (((pgm_read_byte(&sine_table[sine_index1]) - 127) * amplitude) >> 8) * !s2;
  sine_sample2 = (((pgm_read_byte(&sine_table[sine_index2]) - 127) * amplitude) >> 8) * !s3;
  sine_sample3 = (((pgm_read_byte(&sine_table[sine_index3]) - 127) * amplitude) >> 8) * !s4;
  drum_sample = ((pgm_read_byte(&drum_table[drum_index])) - 127) * (s5_latch || (s5_continuous && !s5));

  sample_out_temp = ((sine_sample1 + sine_sample2 + sine_sample3 + drum_sample) >> 1) + 127;

  if (sample_out_temp > 255) {
    sample_out_temp -= (sample_out_temp - 255) << 1; //fold don't clip!
  }

  if (sample_out_temp < 0) {
    sample_out_temp += sample_out_temp * -2;
  }

  sample_out = sample_out_temp;

  uint16_t dac_out = (0 << 15) | (1 << 14) | (1 << 13) | (1 << 12) | (sample_out << 4);
  digitalWrite(10, LOW);
  SPI.transfer(dac_out >> 8);
  SPI.transfer(dac_out & 255);
  digitalWrite(10, HIGH);

  sine_accumulator1 += sine_pitch1 << 2;
  sine_index1 = (dds_tune * sine_accumulator1) >> (32 - 8);

  sine_accumulator2 += sine_pitch2 << 2;
  sine_index2 = (dds_tune * sine_accumulator2) >> (32 - 8);

  sine_accumulator3 += sine_pitch3 << 2;
  sine_index3 = (dds_tune * sine_accumulator3) >> (32 - 8);

  if (s5_continuous) {
    drum_accumulator += drum_pitch >> 3;
    drum_index = (drum_accumulator >> (6));

    if (drum_index > drum_window_end) {
      drum_index = drum_window_start;
      drum_accumulator = drum_window_start;
    }
  } else if (s5_latch) {
    drum_accumulator += drum_pitch >> 3;
    drum_index = (drum_accumulator >> (6));
    
    if (drum_index > drum_length) {
      drum_index = 0;
      drum_accumulator = 0;
      s5_latch = 0;
    }
  }
}

void loop(void) {
  byte d2 = digitalRead(2);
  byte d3 = digitalRead(3);
  byte d4 = digitalRead(4);
  byte d5 = digitalRead(5);
  byte d6 = digitalRead(6);

  // analogRead should be able to do 0-1023 for values
  // but my potentiometers only get up to ~855
  drum_window_start = map(analogRead(A0), 0, 855, 0, drum_length);
  drum_window_end = map(analogRead(A1), 0, 855, 0, drum_length);

  if (d2 == ls2) ld2 = millis();
  if (d3 == ls3) ld3 = millis();
  if (d4 == ls4) ld4 = millis();
  if (d5 == ls5) ld5 = millis();
  if (d6 == ls6) ld6 = millis();

  if (d2 != ls2 && (millis() - ld2) > debounceDelay) s2 = d2;
  if (d3 != ls3 && (millis() - ld3) > debounceDelay) s3 = d3;
  if (d4 != ls4 && (millis() - ld4) > debounceDelay) s4 = d4;

  if (d5 != ls5 && (millis() - ld5) > debounceDelay) {
    s5 = d5;
    s5_trigger = !s5 && ls5;
  }

  if (d6 != ls6 && (millis() - ld6) > debounceDelay) {
    s6 = d6;

    if (!s6) {
      s5_continuous = !s5_continuous;
      drum_index = 0;
      drum_accumulator = 0;
    }
  }
  
  ls2 = s2;
  ls3 = s3;
  ls4 = s4;
  ls5 = s5;
  ls6 = s6;
}
